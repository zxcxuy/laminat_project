import telebot
from telebot import types
from searchDB import search

token = "6175392804:AAE_F9DiCwJwxydTY9V6qdU1spRAelfJS6E"
bot = telebot.TeleBot(token)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
USER_STATES = {}

@bot.message_handler(commands=['start'])
def start(message):
    USER_STATES[message.chat.id] = None
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –∏—â–µ–º?",
        reply_markup=main_buttons()
    )

@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    chat_id = message.chat.id
    
    if message.text in ["üîç –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É", "üîë –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É"]:
        USER_STATES[chat_id] = message.text
        prompt = "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):" if message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É" else "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):"
        bot.send_message(chat_id, prompt, reply_markup=types.ReplyKeyboardRemove())
    
    elif chat_id in USER_STATES and USER_STATES[chat_id]:
        search_type = USER_STATES[chat_id]
        search_query = message.text
        
        product_data = search(search_query, search_type)
        formatted_message, image_url = formatter(product_data)
        
        if image_url:
            try:
                bot.send_photo(chat_id, image_url)
            except:
                pass
        
        bot.send_message(
            chat_id,
            formatted_message if formatted_message else "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=main_buttons()
        )
        
        USER_STATES[chat_id] = None
    
    else:
        bot.send_message(
            chat_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
            reply_markup=main_buttons()
        )

def main_buttons():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É")
    btn2 = types.KeyboardButton("üîë –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É")
    markup.add(btn1, btn2)
    return markup

def formatter(data):
    if not data or not isinstance(data, dict):
        return "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", None
    
    exclude_fields = {'id', '–°—Å—ã–ª–∫–∞', '–ö–∞—Ä—Ç–∏–Ω–∫–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'}
    
    special_formatting = {
        '–¶–µ–Ω–∞': lambda x: f"{float(x):.2f} ‚ÇΩ" if x else None,
        '–ú–µ—Ç—Ä–∞–∂': lambda x: f"{x} –º¬≤" if x else None
    }
    
    title = f"<a href='{data.get('–°—Å—ã–ª–∫–∞', '')}'>{data.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</a>\n\n"
    
    characteristics = []
    for key, value in data.items():
        if key in exclude_fields or value is None:
            continue
        
        if key in special_formatting:
            value = special_formatting[key](value)
            if value is None:
                continue
        
        characteristics.append(f"<b>{key}:</b> {value}")
    
    message = title + "\n".join(characteristics) + "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    return message, data.get('–ö–∞—Ä—Ç–∏–Ω–∫–∞')

bot.infinity_polling()
